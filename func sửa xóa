##Update Category

CREATE OR REPLACE FUNCTION update_category(category_id INT, new_name_category VARCHAR)
RETURNS VOID AS $$
BEGIN
    UPDATE Category
    SET Name_Category = new_name_category
    WHERE ID_Category = category_id;
END;
$$ LANGUAGE plpgsql;

##Update Food

CREATE OR REPLACE FUNCTION update_food(food_id INT, new_name_food VARCHAR, new_price REAL, new_id_category INT)
RETURNS VOID AS $$
BEGIN
    UPDATE Food
    SET Name_Food = new_name_food, Price = new_price, ID_Category = new_id_category
    WHERE ID_Food = food_id;
END;
$$ LANGUAGE plpgsql;

##Update customer

CREATE OR REPLACE FUNCTION update_customer(customer_id INT, new_name_customer VARCHAR, new_phone VARCHAR, new_status BOOLEAN)
RETURNS VOID AS $$
BEGIN
    UPDATE Customer
    SET Name_Customer = new_name_customer, Phone = new_phone, status = new_status
    WHERE ID_Customer = customer_id;
END;
$$ LANGUAGE plpgsql;

##Update bill

CREATE OR REPLACE FUNCTION update_bill(bill_id INT, new_status_bill BOOLEAN, new_date_order DATE, new_time_order TIME, new_id_customer INT)
RETURNS VOID AS $$
BEGIN
    UPDATE Bill
    SET Status_Bill = new_status_bill,  Date_Order = new_date_order, Time_Order = new_time_order, ID_Customer = new_id_customer
    WHERE ID_Bill = bill_id;
END;
$$ LANGUAGE plpgsql;

##Update bill line

CREATE OR REPLACE FUNCTION update_bill_line(bill_line_id INT, bill_id INT, new_id_food INT, new_quantity INT)
RETURNS VOID AS $$
BEGIN
    UPDATE Bill_Line
    SET ID_Food = new_id_food, Quantity = new_quantity
    WHERE ID_Bill = bill_id and ID_Bill_Line = bill_line_id;
END;
$$ LANGUAGE plpgsql;


##Update employee

CREATE OR REPLACE FUNCTION update_employee(employee_id INT, new_name_employee VARCHAR, new_phone VARCHAR, new_email VARCHAR, new_cccd VARCHAR)
RETURNS VOID AS $$
BEGIN
    UPDATE Employee
    SET Name_Employee = new_name_employee, Phone = new_phone, Email = new_email, CCCD = new_cccd
    WHERE ID_Employee = id_employee;
END;
$$ LANGUAGE plpgsql;

##Update Shift

CREATE OR REPLACE FUNCTION update_shift(shift_id INT, new_date_shift DATE, new_time_shift TIME)
RETURNS VOID AS $$
BEGIN
    UPDATE Shift
    SET Date_Shift = new_date_shift, Time_Shift = new_time_shift
    WHERE ID_Shift = shift_id;
END;
$$ LANGUAGE plpgsql;

##Update schedule

CREATE OR REPLACE FUNCTION update_schedule(employee_id INT, new_id_shift INT)
RETURNS VOID AS $$
BEGIN
    UPDATE Schedule
    SET ID_Shift = new_id_shift
    WHERE ID_Employee = id_employee;
END;
$$ LANGUAGE plpgsql;

##Delete employee

CREATE OR REPLACE FUNCTION delete_employee(employee_id INT)
RETURNS VOID AS $$
BEGIN
    DELETE FROM Employee WHERE ID_Employee = id_employee;
END;
$$ LANGUAGE plpgsql;

##Delete food

CREATE OR REPLACE FUNCTION delete_food(food_id INT)
RETURNS VOID AS $$
BEGIN
    DELETE FROM Food WHERE ID_Food = food_id;
END;
$$ LANGUAGE plpgsql;

##Thêm 1 ngày vào date shift

CREATE OR REPLACE FUNCTION shift_date()
RETURNS VOID AS $$
DECLARE
    c_cursor CURSOR FOR SELECT Date_Shift FROM Shift;
    ca RECORD;
    new_date DATE;
BEGIN
    OPEN c_cursor;
    
    LOOP
        FETCH c_cursor INTO ca;
        EXIT WHEN NOT FOUND;
        
        new_date := ca.Date_Shift + INTERVAL '1 day';
        
        UPDATE Shift
        SET Date_Shift = new_date
        WHERE CURRENT OF c_cursor;
    END LOOP;
    
    CLOSE c_cursor;
END;
$$ LANGUAGE plpgsql;


##Update đã thanh toán

CREATE OR REPLACE FUNCTION cap_nhat_trang_thai_thanh_toan(id_bill INT)
RETURNS VOID AS $$
BEGIN
    UPDATE Bill
    SET Purchase_Status = 'Paid'
    WHERE ID_Bill = id_bill;
END;
$$ LANGUAGE plpgsql;

##Tính tổng tiền hóa đơn

CREATE OR REPLACE FUNCTION tinh_tong_tien_hoa_don(bill_id INT)
RETURNS NUMERIC AS $$
DECLARE
    tong_tien NUMERIC := 0;
    item RECORD;
BEGIN
    FOR item IN
        SELECT bl.Quantity, f.Price
        FROM Bill_Line bl
        JOIN Food f ON bl.ID_Food = f.ID_Food
        WHERE bl.ID_Bill = bill_id
    LOOP
        tong_tien := tong_tien + (item.Quantity * item.Price);
    END LOOP;
    RETURN tong_tien;
END;
$$ LANGUAGE plpgsql;


##Tổng doanh thu ngày

CREATE OR REPLACE FUNCTION tong_doanh_thu_ngay(ngay DATE)
RETURNS NUMERIC AS $$
DECLARE
    tong_doanh_thu NUMERIC := 0;
    hoa_don RECORD;
BEGIN
    FOR hoa_don IN
        SELECT ID_Bill
        FROM Bill
        WHERE Date_Order = ngay
        AND status_bill = 'true'
    LOOP
        tong_doanh_thu := tong_doanh_thu + tinh_tong_tien_hoa_don(hoa_don.ID_Bill);
    END LOOP;
    RETURN tong_doanh_thu;
END;
$$ LANGUAGE plpgsql;

##Tổng doanh thu tuần

CREATE OR REPLACE FUNCTION doanh_thu_tuan()
RETURNS TABLE (tuan TIMESTAMP WITH TIME ZONE, doanh_thu NUMERIC) AS $$
BEGIN
    RETURN QUERY
    SELECT DATE_TRUNC('week', Date_Order) AS tuan, SUM(tinh_tong_tien_hoa_don(ID_Bill)) AS doanh_thu
    FROM Bill
    WHERE status_bill = 'true'
    GROUP BY DATE_TRUNC('week', Date_Order)
    ORDER BY tuan;
END;
$$ LANGUAGE plpgsql;

##Tổng doanh thu tháng

CREATE OR REPLACE FUNCTION doanh_thu_thang()
RETURNS TABLE (thang TIMESTAMP WITH TIME ZONE, doanh_thu NUMERIC) AS $$
BEGIN
    RETURN QUERY
    SELECT DATE_TRUNC('month', Date_Order) AS thang, SUM(tinh_tong_tien_hoa_don(ID_Bill)) AS doanh_thu
    FROM Bill
    WHERE status_bill = 'true'
    GROUP BY DATE_TRUNC('month', Date_Order)
    ORDER BY thang;
END;
$$ LANGUAGE plpgsql;

##Tổng số giờ làm của 1 nhân viên trong 1 khoảng thời gian

CREATE OR REPLACE FUNCTION tinh_tong_gio_lam_viec_trong_khoang_thoi_gian(employee_id INT, start_date DATE, end_date DATE)
RETURNS INTERVAL AS $$
DECLARE
    tong_gio INTERVAL := '0 hours';
    ca RECORD;
BEGIN
    FOR ca IN
        SELECT s.Start_Time, s.End_Time
        FROM Schedule sc
        JOIN Shift s ON sc.ID_Shift = s.ID_Shift
        WHERE sc.ID_Employee = id_employee AND s.Date_Shift BETWEEN start_date AND end_date
    LOOP
        tong_gio := tong_gio + (ca.Time_End - ca.Time_Start);
    END LOOP;
    RETURN tong_gio;
END;
$$ LANGUAGE plpgsql;










