## Thêm category
CREATE OR REPLACE FUNCTION AddCategory(
    p_Name_Category VARCHAR(100)
) RETURNS VOID AS $$
BEGIN
    -- Kiểm tra xem Name_Category có tồn tại hay không
    IF EXISTS (SELECT 1 FROM Category WHERE Name_Category = p_Name_Category) THEN
        RAISE EXCEPTION 'Category name already exists';
    ELSE
        INSERT INTO Category (Name_Category)
        VALUES (p_Name_Category);
    END IF;
END;
$$ LANGUAGE plpgsql;

SELECT AddCategory('Beverages');

## Thêm food
CREATE OR REPLACE FUNCTION AddFood(
    p_Name_Food VARCHAR(100),
    p_Price REAL,
    p_ID_Category INT
) RETURNS VOID AS $$
BEGIN
    -- Kiểm tra xem ID_Category có tồn tại hay không
    IF NOT EXISTS (SELECT 1 FROM Category WHERE ID_Category = p_ID_Category) THEN
        RAISE EXCEPTION 'Category ID does not exist';
    ELSE
        INSERT INTO Food (Name_Food, Price, ID_Category)
        VALUES (p_Name_Food, p_Price, p_ID_Category);
    END IF;
END;
$$ LANGUAGE plpgsql;

SELECT AddFood('Sushi', 15.99, 1);

## Thêm nhân viên 
CREATE OR REPLACE FUNCTION AddEmployee(
    p_Name_Employee VARCHAR(50),
    p_Phone VARCHAR(16),
    p_Email VARCHAR(50),
    p_CCCD VARCHAR(50)
) RETURNS VOID AS $$
BEGIN
    -- Kiểm tra xem CCCD có tồn tại hay không
    IF EXISTS (SELECT 1 FROM Employee WHERE CCCD = p_CCCD) THEN
        RAISE EXCEPTION 'CCCD already exists';
    ELSE
        INSERT INTO Employee (Name_Employee, Phone, Email, CCCD)
        VALUES (p_Name_Employee, p_Phone, p_Email, p_CCCD);
    END IF;
END;
$$ LANGUAGE plpgsql;

SELECT AddEmployee('Alice', '1112223333', 'alice@example.com', 'CCCD123456');

## Thêm ca vào bảng Shift
CREATE OR REPLACE FUNCTION AddShiftsForDay(
    p_Date_Shift DATE
) RETURNS VOID AS $$
BEGIN
    -- Thêm ca làm việc lúc 7h
    INSERT INTO Shift (Date_Shift, Time_Shift)
    VALUES (p_Date_Shift, '07:00:00');

    -- Thêm ca làm việc lúc 12h
    INSERT INTO Shift (Date_Shift, Time_Shift)
    VALUES (p_Date_Shift, '12:00:00');

    -- Thêm ca làm việc lúc 17h
    INSERT INTO Shift (Date_Shift, Time_Shift)
    VALUES (p_Date_Shift, '17:00:00');
END;
$$ LANGUAGE plpgsql;

SELECT AddShiftsForDay('2024-06-07');

## Thêm customer + bill

-- Create the function to add a customer and a bill
CREATE OR REPLACE FUNCTION add_customer_and_bill(
    p_name VARCHAR,
    p_phone VARCHAR,
    p_status BOOLEAN,
    p_status_bill BOOLEAN,
    p_date_order DATE,
    p_time_order TIME
) RETURNS VOID AS $$
DECLARE
    v_id_customer INT;
BEGIN
    -- Check if the phone number already exists in the Customer table
    SELECT ID_Customer INTO v_id_customer
    FROM Customer
    WHERE Phone = p_phone;

    -- If the phone number does not exist, insert the customer
    IF NOT FOUND THEN
        INSERT INTO Customer (Name_Customer, Phone, status)
        VALUES (p_name, p_phone, p_status)
        RETURNING ID_Customer INTO v_id_customer;
    END IF;

    -- Insert the bill for the customer
    INSERT INTO Bill (Status_Bill, Date_Order, Time_Order, ID_Customer)
    VALUES (p_status_bill, p_date_order, p_time_order, v_id_customer);
END;
$$ LANGUAGE plpgsql;

## Tạo Account nếu có nhu cầu 
CREATE OR REPLACE FUNCTION AddAccountIfNotExists(
    p_Customer_Phone VARCHAR(16),
    p_Name_Account VARCHAR(100)
) RETURNS VOID AS $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM Account WHERE Phone = p_Customer_Phone) THEN
        -- Nếu không tồn tại, thêm tài khoản mới
        INSERT INTO Account (Name_Account, Phone)
        VALUES (p_Name_Account, p_Customer_Phone);
    END IF;
END;
$$ LANGUAGE plpgsql;

SELECT AddAccountIfNotExists('1234567890', 'New_Account');

## Add Bill Line

CREATE OR REPLACE FUNCTION add_bill_line(
    p_Items INT[][],
    p_Item_Count INT
)
RETURNS VOID AS $$
DECLARE
    idd INT;
    i INT;
BEGIN
    SELECT MAX(ID_Bill) INTO idd FROM Bill;
    -- Khai báo cursor để lặp qua các hàng của bảng Bill và lấy ID_Bill lớn nhất
    FOR idd IN SELECT MAX(ID_Bill) FROM bill LOOP
        -- Thêm các món ăn vào bảng bill_line với ID_Bill mới nhất
        FOR i IN 1..p_Item_Count LOOP
            INSERT INTO bill_line (ID_Bill, ID_Food, Quantity) 
            VALUES (idd, p_Items[i][1], p_Items[i][2]);
        END LOOP;
    END LOOP;
END;
$$ LANGUAGE plpgsql;

SELECT add_bill_line(
    ARRAY[[1, 2], [3, 4]],  -- Mảng các món ăn và số lượng tương ứng
    2                        -- Số lượng món ăn trong mảng
);

## Thêm bớt món 
CREATE OR REPLACE FUNCTION modify_bill_line(
    p_bill_id INT,
    p_food_id INT,
    p_quantity_change INT
)
RETURNS VOID AS $$
DECLARE 
    tmp_quantity INT;
BEGIN
    -- Kiểm tra xem món đã tồn tại trong hóa đơn chưa
    SELECT Quantity INTO tmp_quantity
    FROM Bill_Line
    WHERE ID_Bill = p_bill_id AND ID_Food = p_food_id;

    -- Nếu món chưa tồn tại, thêm món vào bảng Bill_Line với số lượng mới
    IF NOT FOUND THEN
        INSERT INTO Bill_Line (ID_Bill, ID_Food, Quantity)
        VALUES (p_bill_id, p_food_id, p_quantity_change);
    ELSE
        -- Tính toán số lượng mới sau khi thêm/bớt
        tmp_quantity := tmp_quantity + p_quantity_change;

        -- Cập nhật số lượng mới vào bảng Bill_Line
        UPDATE Bill_Line
        SET Quantity = tmp_quantity
        WHERE ID_Bill = p_bill_id AND ID_Food = p_food_id;

        -- Kiểm tra nếu số lượng mới bằng 0, thì xóa món khỏi hóa đơn
        IF tmp_quantity = 0 THEN
            DELETE FROM Bill_Line
            WHERE ID_Bill = p_bill_id AND ID_Food = p_food_id;
        END IF;
    END IF;
END;
$$ LANGUAGE plpgsql;

SELECT modify_bill_line(11, 1, 1); 

## Thêm bàn cho hóa đơn

CREATE OR REPLACE FUNCTION Update_table(ID_TableAdd INT)
RETURNS VOID AS $$
DECLARE get_newBillID INT;
BEGIN
    SELECT MAX(ID_Bill) INTO get_newBillID FROM Bill;

	
    UPDATE Table_
	SET status = true , ID_Bill = get_newBillID
	WHERE ID_Table = ID_TableAdd AND status = false;
END;
$$ LANGUAGE plpgsql;

SELECT Update_table(5);
